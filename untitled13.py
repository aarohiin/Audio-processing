# -*- coding: utf-8 -*-
"""Untitled13.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TJLK4z9ZdL5l8PDCP5L__9THN1gRQub8
"""

# Ensure necessary libraries are installed
!pip install pydub numpy

# Import required modules
from pydub import AudioSegment
from pydub.effects import speedup, low_pass_filter
import numpy as np
from google.colab import files
from IPython.display import Audio, display

# Define audio processing functions
def autotune(audio, scale):
    new_sample_rate = int(audio.frame_rate * (1 + scale / 100))
    return audio._spawn(audio.raw_data, overrides={'frame_rate': new_sample_rate})

def change_bpm(audio, new_bpm):
    original_bpm = 120  # This is an assumed value; adjust as needed
    speed_factor = new_bpm / original_bpm
    return speedup(audio, speed_factor)

def apply_reverb(audio, scale):
    reverb_amount = int(scale * 10)
    delay = audio.delay(reverb_amount)
    return audio.overlay(delay)

def apply_bass_boost(audio, scale):
    low_passed = low_pass_filter(audio, 200)
    boosted = audio + (scale * 2)  # Increase overall gain to boost bass
    return boosted.overlay(low_passed)

# Process audio based on user choice
def process_audio(choice, audio_file, scale=None, new_bpm=None):
    audio = AudioSegment.from_wav(audio_file)

    if choice == 1:
        if scale is None:
            scale = 5  # Default autotune scale
        modified_audio = autotune(audio, scale)
    elif choice == 2:
        if new_bpm is None:
            new_bpm = int(input("Enter new BPM: "))
        modified_audio = change_bpm(audio, new_bpm)
    elif choice == 3:
        if scale is None:
            scale = 5  # Default reverb scale
        modified_audio = apply_reverb(audio, scale)
    elif choice == 4:
        if scale is None:
            scale = 5  # Default bass boost scale
        modified_audio = apply_bass_boost(audio, scale)
    else:
        print("Invalid choice.")
        return None, None

    output_file = "modified_audio.wav"
    modified_audio.export(output_file, format="wav")
    print(f"Modified audio saved as {output_file}")

    return audio, modified_audio

# Example usage:
audio_file = '/content/khaak - Voice_Audio.wav'  # Replace with your actual file path

# Get user inputs
choice = int(input("Enter choice (1-Autotune, 2-BPM Change, 3-Reverb, 4-Bass Boost): "))

if choice in [1, 3, 4]:
    scale = int(input("Enter scale (1-10): "))
    original_audio, modified_audio = process_audio(choice, audio_file, scale=scale)
elif choice == 2:
    new_bpm = int(input("Enter new BPM: "))
    original_audio, modified_audio = process_audio(choice, audio_file, new_bpm=new_bpm)

if original_audio and modified_audio:
    # Export original audio for playback
    original_audio.export("original_audio.wav", format="wav")

    # Display audio players
    print("Original Audio:")
    display(Audio("original_audio.wav"))

    print("Modified Audio:")
    display(Audio("modified_audio.wav"))